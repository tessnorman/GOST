# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# ROAD_Criticality.py
# Created on: 2017-03-16 14:32:52.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: ROAD_Criticality <OD_Cost_Matrix> <OutputFolder> <OD_Lines> <Value_Field> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, sys, os
'''prints the time along with the message'''
def tPrint(s):
    print"%s\t%s" % (time.strftime("%H:%M:%S"), s)

# Check out any necessary licenses
arcpy.CheckOutExtension("Network")

#Input Variables
inNetworkDataset = r"D:\HTI\Updated Network\routier_integrated10m_UPDATE_ND.nd"
ODLayer = "ODMatrix"
impedanceAttribute = "Time"
accumulationAttribute = "Time;Length"
outputFields = "Name;OriginID;DestinationID;Total_Time;Total_Length"
inOrigins = r"D:\HTI\GRID_1000m_origins_trimmed\Pap_OD.shp"
originID = "ID_forJoin"
inDests = inOrigins
destID = "ID_forJoin"
midPoints = r"D:\HTI\NonRes_MidPoints_Remain.shp"
midPointsID = "ORIG_FID"
outputFolder = r"D:\HTI\NetworkResults"

#Create the OD Matrix and get reference to appropriate layer objects
outNALayer = arcpy.na.MakeODCostMatrixLayer(inNetworkDataset, ODLayer, impedanceAttribute,
    accumulate_attribute_name = accumulationAttribute)
outNALayer = outNALayer.getOutput(0)
naLayers = arcpy.na.GetNAClassNames(outNALayer)
originsLyr = naLayers['Origins']
destinationsLyr = naLayers['Destinations']
pointBarrier = naLayers['Barriers']

#Get the origin layer object from within the OD cost matrix layer
for layer in arcpy.mapping.ListLayers(outNALayer)[1:]:
    if layer.datasetName == "ODLines":
        linesLyr = layer
            
#Add the origins and destinations
destFieldMappings = arcpy.na.NAClassFieldMappings(outNALayer, destinationsLyr, False)
destFieldMappings['Name'].mappedFieldName = destID
arcpy.na.AddLocations(outNALayer, destinationsLyr, inDests, destFieldMappings, "5000 Meters")
    
originFieldMappings = arcpy.na.NAClassFieldMappings(outNALayer, originsLyr, False)
originFieldMappings['Name'].mappedFieldName = originID
arcpy.na.AddLocations(outNALayer, originsLyr, inOrigins, originFieldMappings, "5000 Meters")
tPrint("Added Origins and Destinations")

baselineFile = os.path.join(outputFolder, "baseline.dbf")
if not os.path.exists(baselineFile):
    #Solve and export the baseline results
    arcpy.na.Solve(outNALayer,"HALT")
    arcpy.CopyRows_management(linesLyr, baselineFile)
tPrint("Created baseline analysis")

#Loop through the features in the midPoints
with arcpy.da.SearchCursor(midPoints, ["OID@",midPointsID]) as cur:
    for feat in cur:
        outFile = os.path.join(outputFolder, "d_%s.dbf" % feat[1])
        if not os.path.exists(outFile):
            #Add the current feature as a midpoint
            arcpy.MakeFeatureLayer_management(midPoints, "BARRIER_%s" % feat[1], 
                '"%s" = %s' % (midPointsID, feat[1]))
            arcpy.na.AddLocations(outNALayer, pointBarrier, "BARRIER_%s" % feat[1], "")
            
            #Solve and export the baseline results
            arcpy.na.Solve(outNALayer,"HALT")
            arcpy.CopyRows_management(linesLyr, outFile)
            tPrint("Processed %s" % feat[1])
